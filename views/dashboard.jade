extends layout

head
  block head
    // Latest compiled and minified CSS
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')
    // Optional theme
    //link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css', integrity='sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp', crossorigin='anonymous')
    +bootswatch("superhero")
    // Latest compiled and minified JavaScript
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js', integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa', crossorigin='anonymous')
body
      block content
        .container-fluid
          +nav("OsloMetro", "dropdown_menu", "default")
            +nav_item( "/", "active" ) Kart
            +nav_item( "driver" ) Infrastruktur
            +nav_item( "cmd" ) Kommando
            +nav_item( "dashboard" ) Dashbord
            +nav_item_dropdown( "#" )( label="Innstillinger" )
              +nav_item( "#" ) Action
              +nav_item( "#" ) Another action
              +nav_item( "#" ) Something else here
              +nav_divider
              +nav_header Nav header
              +nav_item( "#" ) Separated link
              +nav_item( "#" ) One more separated link
          //.row
            //.col-md-12
              //div.head
              //h1= title
              //p Welcome to #{title}
          .row
            - const lines = ["1", "2", "3", "4", "5", "6"]
            each line in lines
              .col-lg-4.col-md-4.col-sm-6.col-xs-12
                h4="Linje "+ line
                //(style={"border-style": "solid", "border-width": "thin"})
                .row
                  //.row-flex.row-flex-wrap
                  .col-lg-4.col-md-4.col-sd-3.col-xs-12 Kart
                    svg.svgrpi(id="Line"+line style="height:200px")
                  .col-lg-8.col-md-8.col-sd-9.col-xs-12 Forsinkelser
                    div.table-responsive
                      table.table.table-bordered.table-hover(id="Table"+line style="height:200px")
                        .thead
                          tr
                            th Delay
                            th Train
                            th Destination
                            th Next Station
                            th Direction
                        .tbody
                          tr.danger
                            td 3.10
                            td 104
                            td Frognerseteren
                            td Frøen
                            td Vest
                          tr
                            td.warning 2.49
                            td.info 401
                            td.info Bergkrystallen
                            td.info Stortinget
                            td.info Øst
                          tr.info
                            td 2.10
                            td 203
                            td Furuset
                            td Storo
                            td Øst
                          tr.info
                            td 2.10
                            td 203
                            td Furuset
                            td Storo
                            td Øst
                          tr.info
                            td 2.10
                            td 203
                            td Furuset
                            td Storo
                            td Øst
          script.

            (function() { // wrap code in anonymous function to avoid globals

              const socket = io();

              // Define Object for drawing RPI values
              function Draw (svgCanvas) {

                this.vis = d3.select(svgCanvas)
                this.width = this.vis.style("width");
                this.height = this.vis.style("height");

                // todo: recompute on window resize
                this.centerX = parseInt(this.width) / 2;
                this.centerY = parseInt(this.height) / 2;
              } // End of Object Draw

              Draw.prototype.drawEllipse = function (data) {
                // Note: the variables RPI, newRPI_Elements, exitRPI_Elements are not required
                // they are only there to enable us to debug their value

                let self = this; // Ensure we are able to refer to Draw.this even inside functions below

                let RPI = this.vis.selectAll("ellipse.rpielem")
                  .data(data, function (d) { return (d.TRAINID); });

                // This is the UPDATE section
                // perform modifications to already existing elements
                // We have only one element, the one train with accelerometer data
                // make the radius, color etc vary to reflect the accelerometerdata

                RPI.transition() // .transition makes the changes in rx, ry etc occur smoothly over the the time specified in duration, rather than instantly
                  .duration(1 * 1000) // transition lasts 1 second
                  .attr("rx", function (d) { console.log("d.Acc_Z: " + d.Acc_Z); return d.Acc_Z > 1 || d.Acc_Z < -1 ? (Math.abs(d.Acc_Z)-1) * 10000 : Math.abs(d.Acc_Z) * 1000; })
                  .attr("ry", function (d) { return Math.abs(d.Acc_Z) * 200; })
                  .attr("cx", function (d) { console.log("d.Acc_X: " + d.Acc_X); return (self.centerX + (d.Acc_X*10000)); })
                  .attr("cy", function (d) { console.log("d.Acc_Y: " + d.Acc_Y); return (self.centerY + (d.Acc_Y*10000)); })
                  .style("stroke", function (d) { return d.Acc_X < 0 || d.Acc_Y < 0 || d.Acc_Z < 0 ? "red" : "blue"; })
                  .style("fill", function (d) { return d.Acc_Z < 0 ? "steelblue" : "burlywood"; });

                // This is ENTER section
                // add new elements
                let newRPI_Elements = RPI.enter().append("svg:ellipse")
                  .attr("class", "rpielem")
                  .style("stroke", "black")
                  .style("stroke-width", 1)
                  .attr("cx", this.centerX)
                  .attr("cy", this.centerY)
                  .attr("rx", function (d) { return Math.abs(d.Acc_X) * 10000; })
                  .attr("ry", function (d) { return Math.abs(d.Acc_Y) * 10000; })
                  .style("fill", function (d) { return d.Acc_Z < 0 ? "steelblue" : "burlywood"; });

                let exitRPI_Elements = RPI.exit()
                // This is the EXIT section
                // maybe perform some animations on elements before they are removed?
                // for now, we never enter here since we always receive data for the same train...
                        .remove();
              }; // drawEllipse()


              let arrDraw = [];
              const graphs = d3.selectAll(".svgrpi")
                .each (function (d,i) { arrDraw.push(new Draw("#"+d3.select(this).attr("id"))); });

              socket.on("RPI", function (msg) {
                //console.log("RPI: " + JSON.stringify(msg));
                //arrDraw[0].DrawRPI.drawEllipse([msg]); // msg is an object, convert to array by enclosing in brackets []
              });

              socket.on("cts_event", function (msg) {
                let Line = msg[0].values.Line;
                let Values = msg[0].values;
                arrDraw[Line-1].DrawEllipse([msg]);
                  //drawTrainTable(msg); // array of berths for 1 train
              });


            })(); // end of anonymous function wrap, ref. avoiding globals